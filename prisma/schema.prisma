generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                   String          @id @default(auto()) @map("_id") @db.ObjectId
  email                String          @unique
  name                 String
  password             String
  role                 String          @default("user") 
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  blogs                Blog[]  
  notifications Notification[] @relation
  lastLogin            DateTime?
  profileImage         String?  
  isActive            Boolean         @default(true)  
  isAdmin            Boolean         @default(false)    
}

model Project {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  thumbnail   String
  techStack   String[] 
  link        String?
  images      String[] 
  projectType String  
  testimonial String?
  featured    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isFeatured  Boolean  @default(false)
}

model TeamMember {
  id                   String          @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  role         String
  bio          String
  image        String?
  isActive     Boolean  @default(true)
  skills       String[] 
  socialLinks  Json
  order        Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Blog {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String   @unique
  content     String
  excerpt     String
  coverImage  String
  tags        String[]
  published   Boolean  @default(false)
  publishedAt DateTime?
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Contact {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Job {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  location    String
  type        String
  salary      String
  experience  String
  responsibilities String[]
  requirements String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Career {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  department      String
  location        String
  type            String   
  salary          String?
  description     String
  responsibilities String[]
  requirements    String[]
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  applications    JobApplication[]
}

model JobApplication {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  careerPosition  Career    @relation(fields: [careerId], references: [id], onDelete: Cascade)
  careerId        String    @db.ObjectId
  fullName        String
  email           String
  phone           String
  resumeUrl       String
  coverLetter     String?
  status          String    @default("pending") 
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Notification {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  message       String
  type          String
  targetAudience String[]
  isPriority    Boolean
  creator       User     @relation(fields: [id], references: [id])
  scheduled     Boolean
  scheduledDate DateTime?
  createdAt     DateTime @default(now())
}